# File that is used to test the neural network models generated by the file deep_neural_network.py

import numpy as np
import tensorflow as tf
import time

import stall_recognition as sr
from datasets_preparation import testing_set

# Import of the multilayer perceptrons subunits constituting the deep neural network
lift_model = tf.keras.models.load_model("lift_model.h5")
drag_model = tf.keras.models.load_model("drag_model.h5")

# The function makes predictions of the lift and drag coefficients of an airfoil given the airfoil code and its angle of attack
# it then either print the percentage error of the predictions on the expected data or, in case a post-stall condition is recognized, 
# it prints a message informing the user
def predict_lift_drag(airfoil, angle, experimental_drag, experimental_lift):
    # Predictions of the lift and drag coefficients
    predicted_lift = lift_model.predict(np.array([[int(airfoil[4]), int(airfoil[5]), int(airfoil[6:7]), angle]]))
    predicted_drag = drag_model.predict(np.array([[int(airfoil[4]), int(airfoil[5]), int(airfoil[6:7]), angle, float(predicted_lift)]]))
    global suspected_stall
    # The stall recognition mechanism is summoned in order to check whether the airfoil is in sub-stall
    # conditions at the given angle of attack
    suspected_stall = sr.stall_recognition(airfoil, angle, predicted_drag, predicted_lift, drag_model, lift_model)
    # In case a stall condition is detected this is printed to the user
    if suspected_stall:
        print("\nAt and above this angle, the airfoil with code", airfoil, " has a high chance to be in a situation of stalling, the calculation of lift and drag coefficient cannot be taken by this neural network\n")
    # The percentage error of the predictions on the expected data are measured and printed on the terminal
    else:
        percentage_error_lift = sr.calculate_percentage_error(predicted_lift, experimental_lift)
        percentage_error_drag = sr.calculate_percentage_error(predicted_drag, experimental_drag)
        print("\npredicted lift of", airfoil, "at alpha:", angle, ":  ", predicted_lift,"\nthe exact lift value was", experimental_lift, "\nthe percentage error is", percentage_error_lift )
        print("\npredicted drag of", airfoil, "at alpha:", angle, ":  ", predicted_drag,"\nthe exact drag value was", experimental_drag, "\nthe percentage error is", percentage_error_drag, "\n" )


def main():
    global suspected_stall 
    # For each airfoil in the testing set, for each AOA unless a stall condition is detected, the function preduct_lift_drag is called
    for airfoil in testing_set:
        suspected_stall = False
        for angle in airfoil[1]:
            if not suspected_stall: 
                predict_lift_drag(airfoil[0], angle[0], angle[1], angle[2])
            else: 
                break
            time.sleep(1)

# Code that is run only if the file is run directly and not when it is imported
if __name__ == "__main__":
    main()